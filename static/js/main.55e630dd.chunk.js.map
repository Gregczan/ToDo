{"version":3,"sources":["components/Task.js","components/Home.js","components/AddTask.js","components/App.js","reducers/index.js","reducers/addEvent.js","constants/action-types.js","store.js","serviceWorker.js","index.js"],"names":["Task","task","deleteTask","handleTask","newID","txt","date","id","active","important","finishDate","style","fontWeight","className","onClick","Home","state","sortOn","goFurtherMate","props","history","push","handleSort","setState","prevState","handleDisplay","activeTasks","ourState","filter","item","sort","a","b","map","index","key","doneItems","console","log","this","clearAll","class","Component","AddTask","minDate","Date","toISOString","slice","e","type","target","value","charAt","toUpperCase","checked","handleClick","length","addTask","Link","to","onSubmit","htmlFor","placeholder","onChange","min","App","tasks","counter","goFurther","Route","exact","path","render","combineReducers","addEvent","action","Object","assign","concat","payload","store","createStore","reducers","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55e630dd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Task = ({ task, deleteTask, handleTask, newID }) => {\r\n  const { txt, date, id, active, important, finishDate } = task;\r\n\r\n  const style = {\r\n    fontWeight: \"bold\"\r\n  };\r\n\r\n  if (active) {\r\n    return (\r\n      <tr>\r\n        <td>{newID}</td>\r\n        <td style={important ? style : null}>{txt}</td>\r\n        <td>{date}</td>\r\n        <td>\r\n          <button className=\"tableButton\" onClick={() => handleTask(id)}>\r\n            Done!\r\n          </button>\r\n        </td>\r\n        <td>\r\n          <button className=\"tableButton\" onClick={() => deleteTask(id)}>\r\n            X\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  } else {\r\n    return (\r\n      <tr>\r\n        <td>{newID}</td>\r\n        <td>{txt}</td>\r\n        <td>{finishDate}</td>\r\n        <td>\r\n          <button className=\"tableButton\" onClick={() => deleteTask(id)}>\r\n            X\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n};\r\nexport default Task;\r\n","import React, { Component } from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nclass Home extends Component {\r\n  state = { sortOn: false };\r\n\r\n  goFurtherMate = () => {\r\n    this.props.history.push(\"/addtask\");\r\n  };\r\n  4;\r\n\r\n  handleSort = () => {\r\n    this.setState(prevState => ({\r\n      sortOn: !prevState.sortOn\r\n    }));\r\n  };\r\n\r\n  handleDisplay = () => {\r\n    const activeTasks = this.props.ourState.filter(item => item.active);\r\n\r\n    if (this.state.sortOn) {\r\n      activeTasks.sort((a, b) => {\r\n        if (a.txt < b.txt) {\r\n          return -1;\r\n        }\r\n        if (a.txt > b.txt) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n    }\r\n\r\n    const activeItems = activeTasks.map((item, index) => (\r\n      <Task\r\n        key={index}\r\n        task={item}\r\n        deleteTask={this.props.deleteTask}\r\n        handleTask={this.props.handleTask}\r\n        newID={index}\r\n      />\r\n    ));\r\n\r\n    return activeItems;\r\n  };\r\n\r\n  doneItems = () => {\r\n    const doneTasks = this.props.ourState.filter(item => item.active === false);\r\n    const doneItems = doneTasks.map((item, index) => (\r\n      <Task\r\n        key={index}\r\n        task={item}\r\n        deleteTask={this.props.deleteTask}\r\n        newID={index}\r\n      />\r\n    ));\r\n    return doneItems;\r\n  };\r\n\r\n  render() {\r\n    console.log(this.doneItems);\r\n\r\n    return (\r\n      <div className=\"list\">\r\n        <button className=\"button\" onClick={this.goFurtherMate}>\r\n          Add a Task\r\n        </button>\r\n        <button className=\"button\" onClick={this.props.clearAll}>\r\n          Clear All\r\n        </button>\r\n        <button className=\"button buttonSort\" onClick={this.handleSort}>\r\n          {this.state.sortOn ? \"Unsort\" : \"Sort Alphabetically\"}\r\n        </button>\r\n\r\n        <table class=\"tableActive\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Event</th>\r\n              <th>Date</th>\r\n              <th>Done?</th>\r\n              <th>Cancel</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{this.handleDisplay()}</tbody>\r\n        </table>\r\n\r\n        <table className=\"tableDone\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Event</th>\r\n              <th>Done on</th>\r\n              <th>Cancel</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{this.doneItems()}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n/*handleDisplay = () => {\r\n  const activeTasks = this.props.ourState.filter(item => item.active);\r\n\r\n  if (this.state.sortOn === false) {\r\n    const activeItems = activeTasks.map((item, index) => (\r\n      <Task\r\n        key={index}\r\n        task={item}\r\n        deleteTask={this.props.deleteTask}\r\n        handleTask={this.props.handleTask}\r\n        newID={index}\r\n      />\r\n    ));\r\n\r\n    return activeItems;\r\n  } else if (this.state.sortOn) {\r\n    activeTasks.sort((a, b) => {\r\n      if (a.txt < b.txt) {\r\n        return -1;\r\n      }\r\n      if (a.txt > b.txt) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    const activeItemsSorted = activeTasks.map((item, index) => (\r\n      <Task\r\n        key={index}\r\n        task={item}\r\n        deleteTask={this.props.deleteTask}\r\n        newID={index}\r\n      />\r\n    ));\r\n\r\n    return activeItemsSorted;\r\n  }\r\n};*/\r\n","import React, { Component } from \"react\";\r\nimport \"./AddTask.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass AddTask extends Component {\r\n  state = {\r\n    txt: \"\",\r\n    date: \"\",\r\n    minDate: new Date().toISOString().slice(0, 10),\r\n    important: false\r\n  };\r\n\r\n  handleTask = e => {\r\n    const type = e.target.type;\r\n\r\n    if (type === \"text\") {\r\n      this.setState({\r\n        txt: e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1)\r\n      });\r\n    } else if (type === \"date\") {\r\n      this.setState({\r\n        date: e.target.value\r\n      });\r\n    } else if (type === \"checkbox\") {\r\n      this.setState({\r\n        important: e.target.checked\r\n      });\r\n    }\r\n  };\r\n\r\n  handleClick = () => {\r\n    const { txt, important, date } = this.state;\r\n\r\n    if (txt.length > 3) {\r\n      this.props.addTask(txt, important, date);\r\n    }\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"addTask\">\r\n        <Link to=\"/\">Chuj</Link>\r\n        <form onSubmit={this.handleClick}>\r\n          <label htmlFor=\"addEvent\">\r\n            {\" \"}\r\n            <input\r\n              type=\"text\"\r\n              id=\"addEvent\"\r\n              placeholder=\"Add an event\"\r\n              value={this.state.txt}\r\n              onChange={this.handleTask}\r\n            />\r\n          </label>\r\n          <br />\r\n\r\n          <label htmlFor=\"time\">\r\n            <input\r\n              type=\"date\"\r\n              id=\"time\"\r\n              value={this.state.date}\r\n              onChange={this.handleTask}\r\n              min={this.state.minDate}\r\n            />\r\n          </label>\r\n          <br />\r\n          <label htmlFor=\"checkbox\">\r\n            {\" \"}\r\n            Priority\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"checkbox\"\r\n              checked={this.state.important}\r\n              onChange={this.handleTask}\r\n            />\r\n          </label>\r\n          <br />\r\n\r\n          <button className=\"button\">Add an Event</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React, { Component } from \"react\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport AddTask from \"./AddTask\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.counter = 4;\n    this.state = {\n      tasks: [\n        {\n          id: 0,\n          txt: \"Zagrać w Wiedźmina\",\n          date: \"2018-04-15\",\n          important: true,\n          active: true,\n          finishDate: null\n        },\n        {\n          id: 1,\n          txt: \"Spłodzić syna\",\n          date: \"2018-03-12\",\n          important: true,\n          active: true,\n          finishDate: null\n        },\n        {\n          id: 2,\n          txt: \"Postawić dom\",\n          date: \"2018-06-12\",\n          important: false,\n          active: true,\n          finishDate: null\n        },\n        {\n          id: 3,\n          txt: \"Zasadzić drzewo\",\n          date: \"2018-02-15\",\n          important: true,\n          active: true,\n          finishDate: null\n        }\n      ]\n    };\n  }\n\n  deleteTask = id => {\n    let tasks = [...this.state.tasks];\n\n    tasks = tasks.filter(task => task.id !== id);\n\n    this.setState({\n      tasks: tasks\n    });\n  };\n\n  \n  handleTask = id => {\n    const tasks = [...this.state.tasks];\n    var today = new Date(),\n      date = new Date().toISOString().slice(0, 10);\n    /*today.getFullYear() +\n        \"-\" +\n        \"0\" +\n        today.getMonth() +\n         +\n        \"-\" +\n        today.getDate();*/\n\n    tasks.map(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = date;\n      }\n      return task;\n    });\n    this.setState({\n      tasks: tasks\n    });\n  };\n\n  addTask = (txt, important, date) => {\n    const task = {\n      id: this.counter,\n      txt: txt,\n      date: date,\n      important: important,\n      active: true,\n      finishDate: null\n    };\n    this.counter++;\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }));\n  };\n\n  clearAll = () => {\n    this.setState({\n      tasks: []\n    });\n  };\n\n  goFurther = () => {\n    this.props.history.push(\"/\");\n  };\n  render() {\n    return (\n      <Router>\n        <div className=\"app\">\n          <div className=\"title\">\n            React To Do App\n            <br />\n            Organize Your Day{\" \"}\n          </div>\n\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <Home\n                ourState={this.state.tasks}\n                deleteTask={this.deleteTask}\n                clearAll={this.clearAll}\n                handleTask={this.handleTask}\n                goFurther={this.goFurther}\n                {...props}\n              />\n            )}\n          />\n          <Route\n            path=\"/addtask\"\n            render={props => <AddTask addTask={this.addTask} {...props} />}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { addEvent } from \"./addEvent\";\r\n\r\nexport default combineReducers({\r\n  addEvent\r\n});\r\n","import { ADD_EVENT } from \"../constants/action-types\";\r\n\r\nexport const addEvent = (state = \"\", action) => {\r\n  switch (action.type) {\r\n    case ADD_EVENT:\r\n      return Object.assign({}, state, {\r\n        tasks: state.tasks.concat(action.payload)\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const ADD_EVENT = \"ADD_EVENT\";\r\n","import { createStore } from \"redux\";\r\nimport reducers from \"./reducers\";\r\n\r\nexport const store = createStore(reducers);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}